buildscript {
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.0'
    }
}

plugins {
    id "org.nosphere.apache.rat" version "0.2.0"
}

allprojects {
    apply plugin: 'eclipse';
    apply plugin: 'idea';
    group = 'apache-wave'
    version = '0.4'
}

// Repositories
repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'java';
    //apply plugin: 'scala';
    //apply plugin: 'checkstyle'
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    test.ignoreFailures = true

    compileJava{
        options.incremental = true
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

project(':wave'){
    dependencies {
        compile project(':pst')
    }
}

project(':pst'){
    dependencies {
        compile project(':wave-proto')
    }
}

// Apache Rat Plugin
rat {
    // Input directory, defaults to '.'
    inputDir = '.'
    // XML and HTML reports directory, defaults to project.buildDir + '/reports/rat'
    reportDir = project.file('reports/rat')
    // List of exclude directives, defaults to ['**/.gradle/**']
    excludes = [
            '**/build/**',
            'reports/**',
            '.gradle/',
            '.idea/',
            '.vagrant/',
            '**/*.gradle',
            '**/*.iml',
            '**/generated/**'
    ]
    // Fail the build on rat errors, defaults to true
    failOnError = false
}

rat.doFirst {
    println ''
    println '----------------------------------------------'
    println '             Checking Licenses                '
    println ' This task can take between 10 to 20 minutes. '
    println '----------------------------------------------'
    println ''
}

task createDistSourceZip(type: Zip) {
    baseName = this.group + "-src-" + this.version
    destinationDir = file('distributions')
    from('./') {
        into 'apache-wave-src'
    }
    excludes = [
            'distributions/',
            '.gradle/',
            '.git/',
            '.vagrant/',
            '*/build/*',
            '*/_*',
            '*/gwt-unitCache/',
            '*.iml',
            '*/*.iml',
            '*.iws',
            '*.ipr',
            '*.project',
            '*/*.project',
            '*/*.classpath',
            '*/.settings/',
            '*/*.log*',
            'reports/',
            'wave/war/WEB-INF',
            'wave/war/webclient'
    ]
}

task createDistSourceTar(type: Tar) {
    baseName = this.group + "-src-" + this.version
    destinationDir = file('distributions')
    from('./') {
        into 'apache-wave-src'
    }
    excludes = [
            'distributions/',
            '.gradle/',
            '.git/',
            '.vagrant/',
            '*/build/*',
            '*/_*',
            '*/gwt-unitCache/',
            '*.iml',
            '*/*.iml',
            '*.iws',
            '*.ipr',
            '*.project',
            '*/*.project',
            '*/*.classpath',
            '*/.settings/',
            '*/*.log*',
            'reports/',
            'wave/war/WEB-INF',
            'wave/war/webclient'
    ]
}

task createDistSource() {
    doFirst {
        println ''
        println '--------------------------------------------------------'
        println '             Creating Deployment Source                 '
        println '--------------------------------------------------------'
        println ''
    }
}

createDistSource.dependsOn createDistSourceZip, createDistSourceTar

task createDist() {
    doFirst {
        println ''
        println '--------------------------------------------------------'
        println '        Creating Deployment Source & Binary             '
        println '    Zip and Tar files available in distributions.       '
        println '--------------------------------------------------------'
        println ''
    }
}

createDist.dependsOn createDistSource, ":wave:createDistBin"